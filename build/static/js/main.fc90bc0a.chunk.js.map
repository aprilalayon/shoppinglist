{"version":3,"sources":["ShoppingList.js","App.js","serviceWorker.js","index.js","images/paper.png"],"names":["ShoppingList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","list","itemDelete","bind","assertThisInitialized","id","eachItem","splice","setState","_this2","map","react_default","a","createElement","className","key","type","onClick","Component","bgStyle","backgroundImage","concat","Background","App","itemInput","shoppingList","inputChange","formSubmit","e","target","value","preventDefault","listItem","push","style","onSubmit","placeholder","onChange","src_ShoppingList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oQAmCeA,qBAhCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAMR,EAAKD,MAAMS,MAGnBR,EAAKS,WAAaT,EAAKS,WAAWC,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANDA,0EASRY,GACT,IAAMC,EAAWV,KAAKI,MAAMC,KAC5BK,EAASC,OAAOF,EAAI,GACpBT,KAAKY,SAAS,CAAEF,8CAGT,IAAAG,EAAAb,KAEP,OADmBA,KAAKI,MAAMC,KACXS,IAAI,SAACJ,EAAUD,GAC9B,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIE,IAAKV,GACPM,EAAAC,EAAAC,cAAA,SAAIP,GACJK,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASC,QAAS,kBAAMR,EAAKP,WAAWG,KAArD,sBAxBSa,qBCGvBC,EAAU,CACZC,gBAAe,OAAAC,cAASC,EAAT,MAkEFC,cA9Db,SAAAA,EAAY/B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXwB,UAAW,GACXC,aAAc,IAGhBhC,EAAKiC,YAAcjC,EAAKiC,YAAYvB,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACnBA,EAAKkC,WAAalC,EAAKkC,WAAWxB,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARDA,2EAWPmC,GACVhC,KAAKY,SAAS,CACZgB,UAAWI,EAAEC,OAAOC,2CAIbF,GACTA,EAAEG,iBAEF,IAAIC,EAAWpC,KAAKI,MAAMwB,UAET,OAAbQ,GAAkC,KAAbA,GACvBpC,KAAKI,MAAMyB,aAAaQ,KAAKD,GAC7BpC,KAAKY,SAAS,CACZgB,UAAWQ,KAGbpC,KAAKY,SAAS,CACZgB,UAAW,KAIf5B,KAAKY,SAAS,CACZgB,UAAW,sCAKb,OACEb,EAAAC,EAAAC,cAAA,OACEC,UAAU,UACVoB,MAAQf,GAERR,EAAAC,EAAAC,cAAA,QAAMsB,SAAUvC,KAAK+B,YACnBhB,EAAAC,EAAAC,cAAA,+BACIF,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLoB,YAAY,gBACZN,MAAOlC,KAAKI,MAAMwB,UAClBa,SAAUzC,KAAK8B,cACnBf,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASC,QAASrB,KAAK+B,YAApC,gBAGJhB,EAAAC,EAAAC,cAACyB,EAAD,CACErC,KAAML,KAAKI,MAAMyB,uBAxDTP,aCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.fc90bc0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ShoppingList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: this.props.list\n    };\n\n    this.itemDelete = this.itemDelete.bind(this);\n  }\n\n  itemDelete(id) {\n    const eachItem = this.state.list;\n    eachItem.splice(id, 1);\n    this.setState({ eachItem }); \n  }\n\n  render() {\n    const updatedList= this.state.list;\n    return updatedList.map((eachItem, id) => {\n        return (\n          <div className=\"ShoppingList\">\n            <ul>\n                <li key={id}>\n                  <p>{eachItem}</p>\n                  <button type=\"submit\" onClick={() => this.itemDelete(id)}>Delete</button>\n                </li>\n            </ul>\n        </div>\n      );\n    });\n  }\n}\n\nexport default ShoppingList;\n","import React, { Component } from 'react';\nimport './styles/App.css';\nimport ShoppingList from './ShoppingList';\nimport Background from './images/paper.png';\n\nvar bgStyle = {\n  backgroundImage: `url(${Background})`\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemInput: '',\n      shoppingList: [],\n    };\n\n    this.inputChange = this.inputChange.bind(this);\n    this.formSubmit = this.formSubmit.bind(this);\n  }\n\n  inputChange(e) {\n    this.setState({\n      itemInput: e.target.value\n    });\n  }\n\n  formSubmit(e) {\n    e.preventDefault();\n\n    let listItem = this.state.itemInput;\n\n    if (listItem !== null && listItem !== '') {\n      this.state.shoppingList.push(listItem);\n      this.setState({\n        itemInput: listItem\n      });\n    }else{\n      this.setState({\n        itemInput: ''\n      });\n    }\n\n    this.setState({\n      itemInput: ''\n    });\n  }\n\n  render() {\n    return (\n      <div \n        className=\"wrapper\"\n        style={ bgStyle }\n      >\n        <form onSubmit={this.formSubmit}>\n          <h1>Today's Checklist</h1>\n              <input \n                type=\"text\"\n                placeholder=\"Enter an item\"\n                value={this.state.itemInput} \n                onChange={this.inputChange} />\n            <button type=\"submit\" onClick={this.formSubmit} >Add to list</button>\n        </form>\n        \n        <ShoppingList \n          list={this.state.shoppingList}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/paper.e3b2e2de.png\";"],"sourceRoot":""}